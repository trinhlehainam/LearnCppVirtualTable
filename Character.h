#pragma once
#include "BaseActor.h"

struct Character;
void CharacterConstructor(Character* self); // Character()
void CharacterConstructor(Character* self, float AttackDamage); // Character(float AttackDamage)

void CharacterDestructor(Character* self); // ~Character()

void CharacterOverrideUpdate(Character* self); // void Update() override
void CharacterVirtualAttack(Character* self); // virtual void Attack()

// Methods generated by this class to run Virtual Methods derived from Parent Class
void CharacterUpdate(Character* self);
void CharacterAttack(Character* self);
//

// Each class has its own virtual table
struct CharacterVtable
{
    // only used or generated by compiler when this class or parent's Destructor is declared as virtual
    void (*ChildDestructor)(void* self);
    void (*Update)(Character* self);
    void (*Attack)(Character* self);
};

struct Character
{
    // Inherited from Base class
    BaseActor Parent;

    float AttackDamage;
};